// -*- Metal -*-
//===-- metal_command_buffer ----------------------------------------------===//
// Copyright (c) 2018-2019 Apple Inc. All rights reserved
//===----------------------------------------------------------------------===//

#ifndef __METAL_COMMAND_BUFFER
#define __METAL_COMMAND_BUFFER

namespace metal
{
// Metal 2.1 s5.16: Encoding Commands for Indirect Command Buffers

struct MTLIndirectCommandBufferExecutionRange {
  uint location;
  uint length;
};

#pragma METAL internals : enable
struct command_buffer
{
#if defined(__HAVE_GET_SIZE_COMMAND_BUFFER__)
  METAL_FUNC size_t size() const thread
  {
    return __metal_get_size_command_buffer(t);
  }
  METAL_FUNC size_t size() const device
  {
    return __metal_get_size_command_buffer(t);
  }
  METAL_FUNC size_t size() const constant
  {
    return __metal_get_size_command_buffer(t);
  }
#endif // defined(__HAVE_GET_SIZE_COMMAND_BUFFER__)
private:
  __metal_command_buffer_t t;
  friend struct _command;
};

struct _command
{
protected:
  METAL_FUNC explicit _command(command_buffer icb, uint icb_index) thread
      : icb(icb.t), icb_index(icb_index)
  {
  }

  __metal_command_buffer_t icb;
  uint icb_index;

  friend struct render_command;
};


#if defined(__HAVE_RENDER_COMMANDS__)
#if defined(__HAVE_RENDER_PIPELINE_STATE__)
struct render_pipeline_state
{
private:
  __metal_render_pipeline_state_t t;
  friend struct render_command;
};
#endif // defined(__HAVE_RENDER_PIPELINE_STATE__)

enum class primitive_type
{
  point,
  line,
  line_strip,
  triangle,
  triangle_strip
};

struct render_command : public _command
{
  METAL_FUNC explicit render_command(command_buffer icb, uint icb_index) thread
      : _command(icb, icb_index)
  {
  }

#if defined(__HAVE_RENDER_PIPELINE_STATE__)
  METAL_FUNC void set_render_pipeline_state(render_pipeline_state pipeline_state) thread
  {
    __metal_set_pipeline_state_render_command(icb, icb_index, pipeline_state.t);
  }
#endif // defined(__HAVE_RENDER_PIPELINE_STATE__)

  template <typename T, typename _E = typename enable_if<is_metal_buffer_pointee<T>::value>::type>
  METAL_FUNC void set_vertex_buffer(device T *buffer, uint index) thread
  {
    __metal_set_vertex_buffer_render_command(icb, icb_index, static_cast<device void *>(const_cast<device remove_const_t<T> *>(buffer)), index);
  }
  template <typename T, typename _E = typename enable_if<is_metal_buffer_pointee<T>::value>::type>
  METAL_FUNC void set_vertex_buffer(constant T *buffer, uint index) thread
  {
    __metal_set_vertex_buffer_render_command(icb, icb_index, static_cast<constant void *>(const_cast<constant remove_const_t<T> *>(buffer)), index);
  }

  template <typename T, typename _E = typename enable_if<is_metal_buffer_pointee<T>::value>::type>
  METAL_FUNC void set_fragment_buffer(device T *buffer, uint index) thread
  {
    __metal_set_fragment_buffer_render_command(icb, icb_index, static_cast<device void *>(const_cast<device remove_const_t<T> *>(buffer)), index);
  }
  template <typename T, typename _E = typename enable_if<is_metal_buffer_pointee<T>::value>::type>
  METAL_FUNC void set_fragment_buffer(constant T *buffer, uint index) thread
  {
    __metal_set_fragment_buffer_render_command(icb, icb_index, static_cast<constant void *>(const_cast<constant remove_const_t<T> *>(buffer)), index);
  }

  METAL_FUNC void draw_primitives(primitive_type type, uint vertex_start, uint vertex_count, uint instance_count, uint base_instance = 0) thread
  {
    __metal_draw_primitives_render_command(icb, icb_index, uint(type), vertex_start, vertex_count, instance_count, base_instance);
  }

  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, ushort>, is_same<T, uint>>>::type>
  METAL_FUNC void draw_indexed_primitives(primitive_type type, uint index_count, const device T *index_buffer, uint instance_count, uint base_vertex = 0, uint base_instance = 0) thread
  {
    __metal_draw_indexed_primitives_render_command(icb, icb_index, uint(type), index_count, index_buffer, instance_count, base_vertex, base_instance);
  }
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, ushort>, is_same<T, uint>>>::type>
  METAL_FUNC void draw_indexed_primitives(primitive_type type, uint index_count, const constant T *index_buffer, uint instance_count, uint base_vertex = 0, uint base_instance = 0) thread
  {
    __metal_draw_indexed_primitives_render_command(icb, icb_index, uint(type), index_count, index_buffer, instance_count, base_vertex, base_instance);
  }

#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)

#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, const device void *control_point_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, const device void *control_point_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, const device void *control_point_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, const device void *control_point_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, const constant void *control_point_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, const constant void *control_point_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, const constant void *control_point_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const device uint *patch_index_buffer, const constant void *control_point_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, const device void *control_point_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, const device void *control_point_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, const device void *control_point_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, const device void *control_point_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, const constant void *control_point_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, const constant void *control_point_index_buffer, uint instance_count, uint base_instance, const device T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const device void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
#if defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, const constant void *control_point_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0, float scale = 1.0f) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, scale);
  }
#else
  template <typename T, typename _E = typename enable_if<disjunction_v<is_same<T, MTLQuadTessellationFactorsHalf>, is_same<T, MTLTriangleTessellationFactorsHalf>>>::type>
  METAL_FUNC void draw_indexed_patches(uint num_patch_control_points, uint patch_start, uint patch_count, const constant uint *patch_index_buffer, const constant void *control_point_index_buffer, uint instance_count, uint base_instance, const constant T *tessellation_factor_buffer, uint instance_stride = 0) thread
  {
    __metal_draw_indexed_patches_render_command(icb, icb_index, num_patch_control_points, patch_start, patch_count, patch_index_buffer, control_point_index_buffer, instance_count, base_instance, static_cast<const constant void *>(tessellation_factor_buffer), instance_stride, 1.0f);
  }
#endif // defined(__HAVE_RENDER_DRAW_PATCHES_TESSELLATION_FACTOR_SCALE__)

  METAL_FUNC void reset() thread
  {
    __metal_reset_render_command(icb, icb_index);
  }

  // Copy the content of the _command `that` into this _command.
  METAL_FUNC void copy_command(render_command that) thread
  {
    __metal_copy_render_command(icb, icb_index, that.icb, that.icb_index);
  }
};
#endif // defined(__HAVE_RENDER_COMMANDS__)

} // namespace metal

#endif // __METAL_COMMAND_BUFFER
