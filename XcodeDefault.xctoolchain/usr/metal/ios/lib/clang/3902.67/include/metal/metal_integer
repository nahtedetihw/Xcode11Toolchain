// -*- Metal -*-
//===-- metal_integer -----------------------------------------------------===//
// Copyright (c) 2014-2018 Apple Inc. All rights reserved
//===----------------------------------------------------------------------===//

#ifndef __METAL_INTEGER
#define __METAL_INTEGER

namespace metal
{
// Metal 1.1 s5.3: Integer Functions.

METAL_FUNC char abs(char x)
{
  return __metal_abs(x);
}
METAL_FUNC uchar absdiff(char x, char y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC char addsat(char x, char y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC char clamp(char x, char minval, char maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC char clz(char x)
{
  return __metal_clz(x);
}
METAL_FUNC char ctz(char x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char extract_bits(char x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC char hadd(char x, char y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char insert_bits(char base, char insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC char madhi(char x, char y, char z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC char madsat(char x, char y, char z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC char max(char x, char y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC char max3(char x, char y, char z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC char median3(char x, char y, char z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC char min(char x, char y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC char min3(char x, char y, char z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC char mulhi(char x, char y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC char popcount(char x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char reverse_bits(char x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC char rhadd(char x, char y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC char rotate(char x, char y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC char subsat(char x, char y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC char2 abs(char2 x)
{
  return __metal_abs(x);
}
METAL_FUNC uchar2 absdiff(char2 x, char2 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC char2 addsat(char2 x, char2 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC char2 clamp(char2 x, char2 minval, char2 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC char2 clz(char2 x)
{
  return __metal_clz(x);
}
METAL_FUNC char2 ctz(char2 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char2 extract_bits(char2 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC char2 hadd(char2 x, char2 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char2 insert_bits(char2 base, char2 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC char2 madhi(char2 x, char2 y, char2 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC char2 madsat(char2 x, char2 y, char2 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC char2 max(char2 x, char2 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC char2 max3(char2 x, char2 y, char2 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC char2 median3(char2 x, char2 y, char2 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC char2 min(char2 x, char2 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC char2 min3(char2 x, char2 y, char2 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC char2 mulhi(char2 x, char2 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC char2 popcount(char2 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char2 reverse_bits(char2 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC char2 rhadd(char2 x, char2 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC char2 rotate(char2 x, char2 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC char2 subsat(char2 x, char2 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC char3 abs(char3 x)
{
  return __metal_abs(x);
}
METAL_FUNC uchar3 absdiff(char3 x, char3 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC char3 addsat(char3 x, char3 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC char3 clamp(char3 x, char3 minval, char3 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC char3 clz(char3 x)
{
  return __metal_clz(x);
}
METAL_FUNC char3 ctz(char3 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char3 extract_bits(char3 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC char3 hadd(char3 x, char3 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char3 insert_bits(char3 base, char3 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC char3 madhi(char3 x, char3 y, char3 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC char3 madsat(char3 x, char3 y, char3 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC char3 max(char3 x, char3 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC char3 max3(char3 x, char3 y, char3 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC char3 median3(char3 x, char3 y, char3 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC char3 min(char3 x, char3 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC char3 min3(char3 x, char3 y, char3 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC char3 mulhi(char3 x, char3 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC char3 popcount(char3 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char3 reverse_bits(char3 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC char3 rhadd(char3 x, char3 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC char3 rotate(char3 x, char3 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC char3 subsat(char3 x, char3 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC char4 abs(char4 x)
{
  return __metal_abs(x);
}
METAL_FUNC uchar4 absdiff(char4 x, char4 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC char4 addsat(char4 x, char4 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC char4 clamp(char4 x, char4 minval, char4 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC char4 clz(char4 x)
{
  return __metal_clz(x);
}
METAL_FUNC char4 ctz(char4 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char4 extract_bits(char4 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC char4 hadd(char4 x, char4 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char4 insert_bits(char4 base, char4 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC char4 madhi(char4 x, char4 y, char4 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC char4 madsat(char4 x, char4 y, char4 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC char4 max(char4 x, char4 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC char4 max3(char4 x, char4 y, char4 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC char4 median3(char4 x, char4 y, char4 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC char4 min(char4 x, char4 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC char4 min3(char4 x, char4 y, char4 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC char4 mulhi(char4 x, char4 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC char4 popcount(char4 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC char4 reverse_bits(char4 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC char4 rhadd(char4 x, char4 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC char4 rotate(char4 x, char4 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC char4 subsat(char4 x, char4 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC uchar abs(uchar x)
{
  return __metal_abs(x);
}
METAL_FUNC uchar absdiff(uchar x, uchar y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC uchar addsat(uchar x, uchar y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC uchar clamp(uchar x, uchar minval, uchar maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC uchar clz(uchar x)
{
  return __metal_clz(x);
}
METAL_FUNC uchar ctz(uchar x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar extract_bits(uchar x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC uchar hadd(uchar x, uchar y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar insert_bits(uchar base, uchar insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC uchar madhi(uchar x, uchar y, uchar z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC uchar madsat(uchar x, uchar y, uchar z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC uchar max(uchar x, uchar y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC uchar max3(uchar x, uchar y, uchar z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC uchar median3(uchar x, uchar y, uchar z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC uchar min(uchar x, uchar y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC uchar min3(uchar x, uchar y, uchar z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC uchar mulhi(uchar x, uchar y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC uchar popcount(uchar x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar reverse_bits(uchar x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC uchar rhadd(uchar x, uchar y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC uchar rotate(uchar x, uchar y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC uchar subsat(uchar x, uchar y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC uchar2 abs(uchar2 x)
{
  return __metal_abs(x);
}
METAL_FUNC uchar2 absdiff(uchar2 x, uchar2 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC uchar2 addsat(uchar2 x, uchar2 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC uchar2 clamp(uchar2 x, uchar2 minval, uchar2 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC uchar2 clz(uchar2 x)
{
  return __metal_clz(x);
}
METAL_FUNC uchar2 ctz(uchar2 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar2 extract_bits(uchar2 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC uchar2 hadd(uchar2 x, uchar2 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar2 insert_bits(uchar2 base, uchar2 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC uchar2 madhi(uchar2 x, uchar2 y, uchar2 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC uchar2 madsat(uchar2 x, uchar2 y, uchar2 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC uchar2 max(uchar2 x, uchar2 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC uchar2 max3(uchar2 x, uchar2 y, uchar2 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC uchar2 median3(uchar2 x, uchar2 y, uchar2 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC uchar2 min(uchar2 x, uchar2 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC uchar2 min3(uchar2 x, uchar2 y, uchar2 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC uchar2 mulhi(uchar2 x, uchar2 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC uchar2 popcount(uchar2 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar2 reverse_bits(uchar2 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC uchar2 rhadd(uchar2 x, uchar2 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC uchar2 rotate(uchar2 x, uchar2 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC uchar2 subsat(uchar2 x, uchar2 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC uchar3 abs(uchar3 x)
{
  return __metal_abs(x);
}
METAL_FUNC uchar3 absdiff(uchar3 x, uchar3 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC uchar3 addsat(uchar3 x, uchar3 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC uchar3 clamp(uchar3 x, uchar3 minval, uchar3 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC uchar3 clz(uchar3 x)
{
  return __metal_clz(x);
}
METAL_FUNC uchar3 ctz(uchar3 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar3 extract_bits(uchar3 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC uchar3 hadd(uchar3 x, uchar3 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar3 insert_bits(uchar3 base, uchar3 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC uchar3 madhi(uchar3 x, uchar3 y, uchar3 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC uchar3 madsat(uchar3 x, uchar3 y, uchar3 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC uchar3 max(uchar3 x, uchar3 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC uchar3 max3(uchar3 x, uchar3 y, uchar3 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC uchar3 median3(uchar3 x, uchar3 y, uchar3 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC uchar3 min(uchar3 x, uchar3 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC uchar3 min3(uchar3 x, uchar3 y, uchar3 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC uchar3 mulhi(uchar3 x, uchar3 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC uchar3 popcount(uchar3 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar3 reverse_bits(uchar3 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC uchar3 rhadd(uchar3 x, uchar3 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC uchar3 rotate(uchar3 x, uchar3 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC uchar3 subsat(uchar3 x, uchar3 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC uchar4 abs(uchar4 x)
{
  return __metal_abs(x);
}
METAL_FUNC uchar4 absdiff(uchar4 x, uchar4 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC uchar4 addsat(uchar4 x, uchar4 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC uchar4 clamp(uchar4 x, uchar4 minval, uchar4 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC uchar4 clz(uchar4 x)
{
  return __metal_clz(x);
}
METAL_FUNC uchar4 ctz(uchar4 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar4 extract_bits(uchar4 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC uchar4 hadd(uchar4 x, uchar4 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar4 insert_bits(uchar4 base, uchar4 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC uchar4 madhi(uchar4 x, uchar4 y, uchar4 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC uchar4 madsat(uchar4 x, uchar4 y, uchar4 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC uchar4 max(uchar4 x, uchar4 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC uchar4 max3(uchar4 x, uchar4 y, uchar4 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC uchar4 median3(uchar4 x, uchar4 y, uchar4 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC uchar4 min(uchar4 x, uchar4 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC uchar4 min3(uchar4 x, uchar4 y, uchar4 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC uchar4 mulhi(uchar4 x, uchar4 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC uchar4 popcount(uchar4 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uchar4 reverse_bits(uchar4 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC uchar4 rhadd(uchar4 x, uchar4 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC uchar4 rotate(uchar4 x, uchar4 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC uchar4 subsat(uchar4 x, uchar4 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC short abs(short x)
{
  return __metal_abs(x);
}
METAL_FUNC ushort absdiff(short x, short y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC short addsat(short x, short y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC short clamp(short x, short minval, short maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC short clz(short x)
{
  return __metal_clz(x);
}
METAL_FUNC short ctz(short x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short extract_bits(short x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC short hadd(short x, short y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short insert_bits(short base, short insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC short madhi(short x, short y, short z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC short madsat(short x, short y, short z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC short max(short x, short y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC short max3(short x, short y, short z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC short median3(short x, short y, short z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC short min(short x, short y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC short min3(short x, short y, short z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC short mulhi(short x, short y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC short popcount(short x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short reverse_bits(short x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC short rhadd(short x, short y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC short rotate(short x, short y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC short subsat(short x, short y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC short2 abs(short2 x)
{
  return __metal_abs(x);
}
METAL_FUNC ushort2 absdiff(short2 x, short2 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC short2 addsat(short2 x, short2 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC short2 clamp(short2 x, short2 minval, short2 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC short2 clz(short2 x)
{
  return __metal_clz(x);
}
METAL_FUNC short2 ctz(short2 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short2 extract_bits(short2 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC short2 hadd(short2 x, short2 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short2 insert_bits(short2 base, short2 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC short2 madhi(short2 x, short2 y, short2 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC short2 madsat(short2 x, short2 y, short2 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC short2 max(short2 x, short2 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC short2 max3(short2 x, short2 y, short2 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC short2 median3(short2 x, short2 y, short2 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC short2 min(short2 x, short2 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC short2 min3(short2 x, short2 y, short2 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC short2 mulhi(short2 x, short2 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC short2 popcount(short2 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short2 reverse_bits(short2 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC short2 rhadd(short2 x, short2 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC short2 rotate(short2 x, short2 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC short2 subsat(short2 x, short2 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC short3 abs(short3 x)
{
  return __metal_abs(x);
}
METAL_FUNC ushort3 absdiff(short3 x, short3 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC short3 addsat(short3 x, short3 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC short3 clamp(short3 x, short3 minval, short3 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC short3 clz(short3 x)
{
  return __metal_clz(x);
}
METAL_FUNC short3 ctz(short3 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short3 extract_bits(short3 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC short3 hadd(short3 x, short3 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short3 insert_bits(short3 base, short3 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC short3 madhi(short3 x, short3 y, short3 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC short3 madsat(short3 x, short3 y, short3 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC short3 max(short3 x, short3 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC short3 max3(short3 x, short3 y, short3 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC short3 median3(short3 x, short3 y, short3 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC short3 min(short3 x, short3 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC short3 min3(short3 x, short3 y, short3 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC short3 mulhi(short3 x, short3 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC short3 popcount(short3 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short3 reverse_bits(short3 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC short3 rhadd(short3 x, short3 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC short3 rotate(short3 x, short3 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC short3 subsat(short3 x, short3 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC short4 abs(short4 x)
{
  return __metal_abs(x);
}
METAL_FUNC ushort4 absdiff(short4 x, short4 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC short4 addsat(short4 x, short4 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC short4 clamp(short4 x, short4 minval, short4 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC short4 clz(short4 x)
{
  return __metal_clz(x);
}
METAL_FUNC short4 ctz(short4 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short4 extract_bits(short4 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC short4 hadd(short4 x, short4 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short4 insert_bits(short4 base, short4 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC short4 madhi(short4 x, short4 y, short4 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC short4 madsat(short4 x, short4 y, short4 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC short4 max(short4 x, short4 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC short4 max3(short4 x, short4 y, short4 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC short4 median3(short4 x, short4 y, short4 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC short4 min(short4 x, short4 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC short4 min3(short4 x, short4 y, short4 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC short4 mulhi(short4 x, short4 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC short4 popcount(short4 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC short4 reverse_bits(short4 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC short4 rhadd(short4 x, short4 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC short4 rotate(short4 x, short4 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC short4 subsat(short4 x, short4 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC ushort abs(ushort x)
{
  return __metal_abs(x);
}
METAL_FUNC ushort absdiff(ushort x, ushort y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC ushort addsat(ushort x, ushort y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC ushort clamp(ushort x, ushort minval, ushort maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC ushort clz(ushort x)
{
  return __metal_clz(x);
}
METAL_FUNC ushort ctz(ushort x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort extract_bits(ushort x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC ushort hadd(ushort x, ushort y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort insert_bits(ushort base, ushort insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC ushort madhi(ushort x, ushort y, ushort z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC ushort madsat(ushort x, ushort y, ushort z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC ushort max(ushort x, ushort y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC ushort max3(ushort x, ushort y, ushort z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC ushort median3(ushort x, ushort y, ushort z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC ushort min(ushort x, ushort y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC ushort min3(ushort x, ushort y, ushort z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC ushort mulhi(ushort x, ushort y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC ushort popcount(ushort x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort reverse_bits(ushort x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC ushort rhadd(ushort x, ushort y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC ushort rotate(ushort x, ushort y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC ushort subsat(ushort x, ushort y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC ushort2 abs(ushort2 x)
{
  return __metal_abs(x);
}
METAL_FUNC ushort2 absdiff(ushort2 x, ushort2 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC ushort2 addsat(ushort2 x, ushort2 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC ushort2 clamp(ushort2 x, ushort2 minval, ushort2 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC ushort2 clz(ushort2 x)
{
  return __metal_clz(x);
}
METAL_FUNC ushort2 ctz(ushort2 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort2 extract_bits(ushort2 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC ushort2 hadd(ushort2 x, ushort2 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort2 insert_bits(ushort2 base, ushort2 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC ushort2 madhi(ushort2 x, ushort2 y, ushort2 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC ushort2 madsat(ushort2 x, ushort2 y, ushort2 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC ushort2 max(ushort2 x, ushort2 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC ushort2 max3(ushort2 x, ushort2 y, ushort2 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC ushort2 median3(ushort2 x, ushort2 y, ushort2 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC ushort2 min(ushort2 x, ushort2 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC ushort2 min3(ushort2 x, ushort2 y, ushort2 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC ushort2 mulhi(ushort2 x, ushort2 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC ushort2 popcount(ushort2 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort2 reverse_bits(ushort2 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC ushort2 rhadd(ushort2 x, ushort2 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC ushort2 rotate(ushort2 x, ushort2 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC ushort2 subsat(ushort2 x, ushort2 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC ushort3 abs(ushort3 x)
{
  return __metal_abs(x);
}
METAL_FUNC ushort3 absdiff(ushort3 x, ushort3 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC ushort3 addsat(ushort3 x, ushort3 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC ushort3 clamp(ushort3 x, ushort3 minval, ushort3 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC ushort3 clz(ushort3 x)
{
  return __metal_clz(x);
}
METAL_FUNC ushort3 ctz(ushort3 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort3 extract_bits(ushort3 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC ushort3 hadd(ushort3 x, ushort3 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort3 insert_bits(ushort3 base, ushort3 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC ushort3 madhi(ushort3 x, ushort3 y, ushort3 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC ushort3 madsat(ushort3 x, ushort3 y, ushort3 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC ushort3 max(ushort3 x, ushort3 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC ushort3 max3(ushort3 x, ushort3 y, ushort3 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC ushort3 median3(ushort3 x, ushort3 y, ushort3 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC ushort3 min(ushort3 x, ushort3 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC ushort3 min3(ushort3 x, ushort3 y, ushort3 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC ushort3 mulhi(ushort3 x, ushort3 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC ushort3 popcount(ushort3 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort3 reverse_bits(ushort3 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC ushort3 rhadd(ushort3 x, ushort3 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC ushort3 rotate(ushort3 x, ushort3 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC ushort3 subsat(ushort3 x, ushort3 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC ushort4 abs(ushort4 x)
{
  return __metal_abs(x);
}
METAL_FUNC ushort4 absdiff(ushort4 x, ushort4 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC ushort4 addsat(ushort4 x, ushort4 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC ushort4 clamp(ushort4 x, ushort4 minval, ushort4 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC ushort4 clz(ushort4 x)
{
  return __metal_clz(x);
}
METAL_FUNC ushort4 ctz(ushort4 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort4 extract_bits(ushort4 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC ushort4 hadd(ushort4 x, ushort4 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort4 insert_bits(ushort4 base, ushort4 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC ushort4 madhi(ushort4 x, ushort4 y, ushort4 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC ushort4 madsat(ushort4 x, ushort4 y, ushort4 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC ushort4 max(ushort4 x, ushort4 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC ushort4 max3(ushort4 x, ushort4 y, ushort4 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC ushort4 median3(ushort4 x, ushort4 y, ushort4 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC ushort4 min(ushort4 x, ushort4 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC ushort4 min3(ushort4 x, ushort4 y, ushort4 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC ushort4 mulhi(ushort4 x, ushort4 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC ushort4 popcount(ushort4 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC ushort4 reverse_bits(ushort4 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC ushort4 rhadd(ushort4 x, ushort4 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC ushort4 rotate(ushort4 x, ushort4 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC ushort4 subsat(ushort4 x, ushort4 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC int abs(int x)
{
  return __metal_abs(x);
}
METAL_FUNC uint absdiff(int x, int y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC int addsat(int x, int y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC int clamp(int x, int minval, int maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC int clz(int x)
{
  return __metal_clz(x);
}
METAL_FUNC int ctz(int x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int extract_bits(int x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC int hadd(int x, int y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int insert_bits(int base, int insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC int madhi(int x, int y, int z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC int madsat(int x, int y, int z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC int max(int x, int y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC int max3(int x, int y, int z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC int median3(int x, int y, int z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC int min(int x, int y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC int min3(int x, int y, int z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC int mulhi(int x, int y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC int popcount(int x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int reverse_bits(int x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC int rhadd(int x, int y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC int rotate(int x, int y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC int subsat(int x, int y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC int2 abs(int2 x)
{
  return __metal_abs(x);
}
METAL_FUNC uint2 absdiff(int2 x, int2 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC int2 addsat(int2 x, int2 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC int2 clamp(int2 x, int2 minval, int2 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC int2 clz(int2 x)
{
  return __metal_clz(x);
}
METAL_FUNC int2 ctz(int2 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int2 extract_bits(int2 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC int2 hadd(int2 x, int2 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int2 insert_bits(int2 base, int2 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC int2 madhi(int2 x, int2 y, int2 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC int2 madsat(int2 x, int2 y, int2 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC int2 max(int2 x, int2 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC int2 max3(int2 x, int2 y, int2 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC int2 median3(int2 x, int2 y, int2 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC int2 min(int2 x, int2 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC int2 min3(int2 x, int2 y, int2 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC int2 mulhi(int2 x, int2 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC int2 popcount(int2 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int2 reverse_bits(int2 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC int2 rhadd(int2 x, int2 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC int2 rotate(int2 x, int2 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC int2 subsat(int2 x, int2 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC int3 abs(int3 x)
{
  return __metal_abs(x);
}
METAL_FUNC uint3 absdiff(int3 x, int3 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC int3 addsat(int3 x, int3 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC int3 clamp(int3 x, int3 minval, int3 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC int3 clz(int3 x)
{
  return __metal_clz(x);
}
METAL_FUNC int3 ctz(int3 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int3 extract_bits(int3 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC int3 hadd(int3 x, int3 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int3 insert_bits(int3 base, int3 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC int3 madhi(int3 x, int3 y, int3 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC int3 madsat(int3 x, int3 y, int3 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC int3 max(int3 x, int3 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC int3 max3(int3 x, int3 y, int3 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC int3 median3(int3 x, int3 y, int3 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC int3 min(int3 x, int3 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC int3 min3(int3 x, int3 y, int3 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC int3 mulhi(int3 x, int3 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC int3 popcount(int3 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int3 reverse_bits(int3 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC int3 rhadd(int3 x, int3 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC int3 rotate(int3 x, int3 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC int3 subsat(int3 x, int3 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC int4 abs(int4 x)
{
  return __metal_abs(x);
}
METAL_FUNC uint4 absdiff(int4 x, int4 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC int4 addsat(int4 x, int4 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC int4 clamp(int4 x, int4 minval, int4 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC int4 clz(int4 x)
{
  return __metal_clz(x);
}
METAL_FUNC int4 ctz(int4 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int4 extract_bits(int4 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC int4 hadd(int4 x, int4 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int4 insert_bits(int4 base, int4 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC int4 madhi(int4 x, int4 y, int4 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC int4 madsat(int4 x, int4 y, int4 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC int4 max(int4 x, int4 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC int4 max3(int4 x, int4 y, int4 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC int4 median3(int4 x, int4 y, int4 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC int4 min(int4 x, int4 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC int4 min3(int4 x, int4 y, int4 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC int4 mulhi(int4 x, int4 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC int4 popcount(int4 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC int4 reverse_bits(int4 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC int4 rhadd(int4 x, int4 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC int4 rotate(int4 x, int4 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC int4 subsat(int4 x, int4 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC uint abs(uint x)
{
  return __metal_abs(x);
}
METAL_FUNC uint absdiff(uint x, uint y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC uint addsat(uint x, uint y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC uint clamp(uint x, uint minval, uint maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC uint clz(uint x)
{
  return __metal_clz(x);
}
METAL_FUNC uint ctz(uint x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint extract_bits(uint x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC uint hadd(uint x, uint y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint insert_bits(uint base, uint insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC uint madhi(uint x, uint y, uint z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC uint madsat(uint x, uint y, uint z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC uint max(uint x, uint y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC uint max3(uint x, uint y, uint z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC uint median3(uint x, uint y, uint z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC uint min(uint x, uint y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC uint min3(uint x, uint y, uint z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC uint mulhi(uint x, uint y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC uint popcount(uint x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint reverse_bits(uint x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC uint rhadd(uint x, uint y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC uint rotate(uint x, uint y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC uint subsat(uint x, uint y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC uint2 abs(uint2 x)
{
  return __metal_abs(x);
}
METAL_FUNC uint2 absdiff(uint2 x, uint2 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC uint2 addsat(uint2 x, uint2 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC uint2 clamp(uint2 x, uint2 minval, uint2 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC uint2 clz(uint2 x)
{
  return __metal_clz(x);
}
METAL_FUNC uint2 ctz(uint2 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint2 extract_bits(uint2 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC uint2 hadd(uint2 x, uint2 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint2 insert_bits(uint2 base, uint2 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC uint2 madhi(uint2 x, uint2 y, uint2 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC uint2 madsat(uint2 x, uint2 y, uint2 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC uint2 max(uint2 x, uint2 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC uint2 max3(uint2 x, uint2 y, uint2 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC uint2 median3(uint2 x, uint2 y, uint2 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC uint2 min(uint2 x, uint2 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC uint2 min3(uint2 x, uint2 y, uint2 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC uint2 mulhi(uint2 x, uint2 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC uint2 popcount(uint2 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint2 reverse_bits(uint2 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC uint2 rhadd(uint2 x, uint2 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC uint2 rotate(uint2 x, uint2 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC uint2 subsat(uint2 x, uint2 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC uint3 abs(uint3 x)
{
  return __metal_abs(x);
}
METAL_FUNC uint3 absdiff(uint3 x, uint3 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC uint3 addsat(uint3 x, uint3 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC uint3 clamp(uint3 x, uint3 minval, uint3 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC uint3 clz(uint3 x)
{
  return __metal_clz(x);
}
METAL_FUNC uint3 ctz(uint3 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint3 extract_bits(uint3 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC uint3 hadd(uint3 x, uint3 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint3 insert_bits(uint3 base, uint3 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC uint3 madhi(uint3 x, uint3 y, uint3 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC uint3 madsat(uint3 x, uint3 y, uint3 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC uint3 max(uint3 x, uint3 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC uint3 max3(uint3 x, uint3 y, uint3 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC uint3 median3(uint3 x, uint3 y, uint3 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC uint3 min(uint3 x, uint3 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC uint3 min3(uint3 x, uint3 y, uint3 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC uint3 mulhi(uint3 x, uint3 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC uint3 popcount(uint3 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint3 reverse_bits(uint3 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC uint3 rhadd(uint3 x, uint3 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC uint3 rotate(uint3 x, uint3 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC uint3 subsat(uint3 x, uint3 y)
{
  return __metal_subsat(x, y);
}
METAL_FUNC uint4 abs(uint4 x)
{
  return __metal_abs(x);
}
METAL_FUNC uint4 absdiff(uint4 x, uint4 y)
{
  return __metal_absdiff(x, y);
}
METAL_FUNC uint4 addsat(uint4 x, uint4 y)
{
  return __metal_addsat(x, y);
}
METAL_FUNC uint4 clamp(uint4 x, uint4 minval, uint4 maxval)
{
  return __metal_clamp(x, minval, maxval);
}
METAL_FUNC uint4 clz(uint4 x)
{
  return __metal_clz(x);
}
METAL_FUNC uint4 ctz(uint4 x)
{
  return __metal_ctz(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint4 extract_bits(uint4 x, uint offset, uint bits)
{
  return __metal_extract_bits(x, offset, bits);
}
#endif
METAL_FUNC uint4 hadd(uint4 x, uint4 y)
{
  return __metal_hadd(x, y);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint4 insert_bits(uint4 base, uint4 insert, uint offset, uint bits)
{
  return __metal_insert_bits(base, insert, offset, bits);
}
#endif
METAL_FUNC uint4 madhi(uint4 x, uint4 y, uint4 z)
{
  return __metal_madhi(x, y, z);
}
METAL_FUNC uint4 madsat(uint4 x, uint4 y, uint4 z)
{
  return __metal_madsat(x, y, z);
}
METAL_FUNC uint4 max(uint4 x, uint4 y)
{
  return __metal_max(x, y);
}
#if defined(__HAVE_MAX3__)
METAL_FUNC uint4 max3(uint4 x, uint4 y, uint4 z)
{
  return __metal_max3(x, y, z);
}
#endif
#if defined(__HAVE_MEDIAN3__)
METAL_FUNC uint4 median3(uint4 x, uint4 y, uint4 z)
{
  return __metal_median3(x, y, z);
}
#endif
METAL_FUNC uint4 min(uint4 x, uint4 y)
{
  return __metal_min(x, y);
}
#if defined(__HAVE_MIN3__)
METAL_FUNC uint4 min3(uint4 x, uint4 y, uint4 z)
{
  return __metal_min3(x, y, z);
}
#endif
METAL_FUNC uint4 mulhi(uint4 x, uint4 y)
{
  return __metal_mulhi(x, y);
}
METAL_FUNC uint4 popcount(uint4 x)
{
  return __metal_popcount(x);
}
#if defined(__HAVE_INTEGER_BIT_EDIT_FUNCTIONS__)
METAL_FUNC uint4 reverse_bits(uint4 x)
{
  return __metal_reverse_bits(x);
}
#endif
METAL_FUNC uint4 rhadd(uint4 x, uint4 y)
{
  return __metal_rhadd(x, y);
}
METAL_FUNC uint4 rotate(uint4 x, uint4 y)
{
  return __metal_rotate(x, y);
}
METAL_FUNC uint4 subsat(uint4 x, uint4 y)
{
  return __metal_subsat(x, y);
}
#if defined(__HAVE_MAD24__)
METAL_FUNC int mad24(int x, int y, int z)
{
  return __metal_mad24(x, y, z);
}
#endif
#if defined(__HAVE_MUL24__)
METAL_FUNC int mul24(int x, int y)
{
  return __metal_mul24(x, y);
}
#endif
#if defined(__HAVE_MAD24__)
METAL_FUNC int2 mad24(int2 x, int2 y, int2 z)
{
  return __metal_mad24(x, y, z);
}
#endif
#if defined(__HAVE_MUL24__)
METAL_FUNC int2 mul24(int2 x, int2 y)
{
  return __metal_mul24(x, y);
}
#endif
#if defined(__HAVE_MAD24__)
METAL_FUNC int3 mad24(int3 x, int3 y, int3 z)
{
  return __metal_mad24(x, y, z);
}
#endif
#if defined(__HAVE_MUL24__)
METAL_FUNC int3 mul24(int3 x, int3 y)
{
  return __metal_mul24(x, y);
}
#endif
#if defined(__HAVE_MAD24__)
METAL_FUNC int4 mad24(int4 x, int4 y, int4 z)
{
  return __metal_mad24(x, y, z);
}
#endif
#if defined(__HAVE_MUL24__)
METAL_FUNC int4 mul24(int4 x, int4 y)
{
  return __metal_mul24(x, y);
}
#endif
#if defined(__HAVE_MAD24__)
METAL_FUNC uint mad24(uint x, uint y, uint z)
{
  return __metal_mad24(x, y, z);
}
#endif
#if defined(__HAVE_MUL24__)
METAL_FUNC uint mul24(uint x, uint y)
{
  return __metal_mul24(x, y);
}
#endif
#if defined(__HAVE_MAD24__)
METAL_FUNC uint2 mad24(uint2 x, uint2 y, uint2 z)
{
  return __metal_mad24(x, y, z);
}
#endif
#if defined(__HAVE_MUL24__)
METAL_FUNC uint2 mul24(uint2 x, uint2 y)
{
  return __metal_mul24(x, y);
}
#endif
#if defined(__HAVE_MAD24__)
METAL_FUNC uint3 mad24(uint3 x, uint3 y, uint3 z)
{
  return __metal_mad24(x, y, z);
}
#endif
#if defined(__HAVE_MUL24__)
METAL_FUNC uint3 mul24(uint3 x, uint3 y)
{
  return __metal_mul24(x, y);
}
#endif
#if defined(__HAVE_MAD24__)
METAL_FUNC uint4 mad24(uint4 x, uint4 y, uint4 z)
{
  return __metal_mad24(x, y, z);
}
#endif
#if defined(__HAVE_MUL24__)
METAL_FUNC uint4 mul24(uint4 x, uint4 y)
{
  return __metal_mul24(x, y);
}
#endif
} // namespace metal

#endif // __METAL_INTEGER
