// -*- Metal -*-
//===-- metal_compute -----------------------------------------------------===//
// Copyright (c) 2014-2018 Apple Inc. All rights reserved
//===----------------------------------------------------------------------===//

#ifndef __METAL_COMPUTE
#define __METAL_COMPUTE

namespace metal
{
// Metal 1.1 s5.8: Compute Functions.

enum class mem_flags
{
  mem_none = __METAL_MEMORY_FLAGS_NONE__,
  mem_device = __METAL_MEMORY_FLAGS_DEVICE__,
  mem_threadgroup = __METAL_MEMORY_FLAGS_THREADGROUP__,
#if defined(__HAVE_IMAGEBLOCKS__)
  mem_threadgroup_imageblock = __METAL_MEMORY_FLAGS_THREADGROUP_IMAGEBLOCK__,
#endif // defined(__HAVE_IMAGEBLOCKS__)
#if defined(__HAVE_TEXTURE_READWRITE__)
  mem_texture = __METAL_MEMORY_FLAGS_TEXTURE__,
#endif
  mem_device_and_threadgroup METAL_DEPRECATED("use mem_device or mem_threadgroup instead") = mem_device | mem_threadgroup
};

#if defined(__HAVE_MEMFLAG_OPERATORS__)
METAL_FUNC constexpr mem_flags operator|(mem_flags x, mem_flags y)
{
  return static_cast<mem_flags>(static_cast<int>(x) | static_cast<int>(y));
}

METAL_FUNC constexpr mem_flags operator&(mem_flags x, mem_flags y)
{
  return static_cast<mem_flags>(static_cast<int>(x) & static_cast<int>(y));
}

METAL_FUNC constexpr mem_flags operator^(mem_flags x, mem_flags y)
{
  return static_cast<mem_flags>(static_cast<int>(x) ^ static_cast<int>(y));
}

METAL_FUNC constexpr mem_flags operator~(mem_flags x)
{
  return static_cast<mem_flags>(~static_cast<int>(x));
}
#endif

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wtautological-compare"
template <>
struct _constarg_traits<mem_flags>
{
  constexpr static METAL_INTERNAL bool check(mem_flags flags)
  {
    return flags == flags;
  }
};
#pragma clang diagnostic pop

METAL_FUNC void threadgroup_barrier(mem_flags flags)
{
  __metal_wg_barrier(int(flags), __METAL_MEMORY_SCOPE_THREADGROUP__);
}

#if   defined(__HAVE_SIMDGROUP_BARRIER__)
METAL_FUNC void simdgroup_barrier(mem_flags flags)
{
  __metal_simdgroup_barrier(int(flags), __METAL_MEMORY_SCOPE_THREADGROUP__);
}
#endif // defined(__HAVE_SIMDGROUP_BARRIER__)

#if defined(__HAVE_DRAW_INDIRECT__)
struct MTLDispatchThreadgroupsIndirectArguments
{
  uint threadgroupsPerGrid[3];
};
#endif

#if defined(__HAVE_COMPUTE_IMPROVED_INDIRECT__)
struct MTLDispatchThreadsIndirectArguments
{
  uint threadsPerGrid[3];
  uint threadsPerThreadgroup[3];
};
#endif

} // namespace metal

#endif // __METAL_COMPUTE
