// -*- Metal -*-
//===-- metal_utility -----------------------------------------------------===//
// Copyright (c) 2014-2018 Apple Inc. All rights reserved
//===----------------------------------------------------------------------===//

#ifndef __METAL_UTILITY
#define __METAL_UTILITY

namespace metal
{
template <typename T, T... I>
struct _integer_sequence
{
  typedef T value_type;
  static constexpr size_t size()
  {
    return sizeof...(I);
  }
};
template <typename T, T N>
using _make_integer_sequence = __make_integer_seq<_integer_sequence, T, N>;
#ifdef __cpp_variable_templates
template <typename T, T... I>
using integer_sequence = _integer_sequence<T, I...>;
template <typename T, T N>
using make_integer_sequence = _make_integer_sequence<T, N>;
#endif

template <typename T>
constexpr thread typename remove_reference<T>::type &&move(thread T &&t)
{
  return static_cast<thread typename remove_reference<T>::type &&>(t);
}
template <typename T>
constexpr device typename remove_reference<T>::type &&move(device T &&t)
{
  return static_cast<device typename remove_reference<T>::type &&>(t);
}
template <typename T>
constexpr constant typename remove_reference<T>::type &&move(constant T &&t)
{
  return static_cast<constant typename remove_reference<T>::type &&>(t);
}
template <typename T>
constexpr threadgroup typename remove_reference<T>::type &&move(threadgroup T &&t)
{
  return static_cast<threadgroup typename remove_reference<T>::type &&>(t);
}
#if defined(__HAVE_IMAGEBLOCKS__)
template <typename T>
constexpr threadgroup_imageblock typename remove_reference<T>::type &&move(threadgroup_imageblock T &&t)
{
  return static_cast<threadgroup_imageblock typename remove_reference<T>::type &&>(t);
}
#endif // defined(__HAVE_IMAGEBLOCKS__)
} // namespace metal

#endif // __METAL_UTILITY
