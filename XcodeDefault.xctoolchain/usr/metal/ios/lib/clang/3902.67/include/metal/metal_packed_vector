// -*- Metal -*-
//===-- metal_packed_vector -----------------------------------------------===//
// Copyright (c) 2014-2018 Apple Inc. All rights reserved
//===----------------------------------------------------------------------===//

#ifndef __METAL_PACKED_VECTOR
#define __METAL_PACKED_VECTOR

typedef __attribute__((__packed_vector_type__(2))) bool packed_bool2;
typedef __attribute__((__packed_vector_type__(3))) bool packed_bool3;
typedef __attribute__((__packed_vector_type__(4))) bool packed_bool4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) bool packed_bool8;
typedef __attribute__((__packed_vector_type__(16))) bool packed_bool16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_bool8 packed_bool8;
typedef struct __Reserved_Name__Do_not_use_packed_bool16 packed_bool16;
#endif

typedef __attribute__((__packed_vector_type__(2))) char packed_char2;
typedef __attribute__((__packed_vector_type__(3))) char packed_char3;
typedef __attribute__((__packed_vector_type__(4))) char packed_char4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) char packed_char8;
typedef __attribute__((__packed_vector_type__(16))) char packed_char16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_char8 packed_char8;
typedef struct __Reserved_Name__Do_not_use_packed_char16 packed_char16;
#endif

typedef __attribute__((__packed_vector_type__(2))) unsigned char packed_uchar2;
typedef __attribute__((__packed_vector_type__(3))) unsigned char packed_uchar3;
typedef __attribute__((__packed_vector_type__(4))) unsigned char packed_uchar4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) unsigned char packed_uchar8;
typedef __attribute__((__packed_vector_type__(16))) unsigned char packed_uchar16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_uchar8 packed_uchar8;
typedef struct __Reserved_Name__Do_not_use_packed_uchar16 packed_uchar16;
#endif

typedef __attribute__((__packed_vector_type__(2))) short packed_short2;
typedef __attribute__((__packed_vector_type__(3))) short packed_short3;
typedef __attribute__((__packed_vector_type__(4))) short packed_short4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) short packed_short8;
typedef __attribute__((__packed_vector_type__(16))) short packed_short16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_short8 packed_short8;
typedef struct __Reserved_Name__Do_not_use_packed_short16 packed_short16;
#endif

typedef __attribute__((__packed_vector_type__(2))) unsigned short packed_ushort2;
typedef __attribute__((__packed_vector_type__(3))) unsigned short packed_ushort3;
typedef __attribute__((__packed_vector_type__(4))) unsigned short packed_ushort4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) unsigned short packed_ushort8;
typedef __attribute__((__packed_vector_type__(16))) unsigned short packed_ushort16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_ushort8 packed_ushort8;
typedef struct __Reserved_Name__Do_not_use_packed_ushort16 packed_ushort16;
#endif

typedef __attribute__((__packed_vector_type__(2))) int packed_int2;
typedef __attribute__((__packed_vector_type__(3))) int packed_int3;
typedef __attribute__((__packed_vector_type__(4))) int packed_int4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) int packed_int8;
typedef __attribute__((__packed_vector_type__(16))) int packed_int16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_int8 packed_int8;
typedef struct __Reserved_Name__Do_not_use_packed_int16 packed_int16;
#endif

typedef __attribute__((__packed_vector_type__(2))) unsigned int packed_uint2;
typedef __attribute__((__packed_vector_type__(3))) unsigned int packed_uint3;
typedef __attribute__((__packed_vector_type__(4))) unsigned int packed_uint4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) unsigned int packed_uint8;
typedef __attribute__((__packed_vector_type__(16))) unsigned int packed_uint16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_uint8 packed_uint8;
typedef struct __Reserved_Name__Do_not_use_packed_uint16 packed_uint16;
#endif

typedef __attribute__((__packed_vector_type__(2))) long packed_long2;
typedef __attribute__((__packed_vector_type__(3))) long packed_long3;
typedef __attribute__((__packed_vector_type__(4))) long packed_long4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) long packed_long8;
typedef __attribute__((__packed_vector_type__(16))) long packed_long16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_long8 packed_long8;
typedef struct __Reserved_Name__Do_not_use_packed_long16 packed_long16;
#endif

typedef __attribute__((__packed_vector_type__(2))) unsigned long packed_ulong2;
typedef __attribute__((__packed_vector_type__(3))) unsigned long packed_ulong3;
typedef __attribute__((__packed_vector_type__(4))) unsigned long packed_ulong4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) unsigned long packed_ulong8;
typedef __attribute__((__packed_vector_type__(16))) unsigned long packed_ulong16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_ulong8 packed_ulong8;
typedef struct __Reserved_Name__Do_not_use_packed_ulong16 packed_ulong16;
#endif

typedef struct __Reserved_Name__Do_not_use_packed_llong2 packed_llong2;
typedef struct __Reserved_Name__Do_not_use_packed_llong3 packed_llong3;
typedef struct __Reserved_Name__Do_not_use_packed_llong4 packed_llong4;
typedef struct __Reserved_Name__Do_not_use_packed_llong8 packed_llong8;
typedef struct __Reserved_Name__Do_not_use_packed_llong16 packed_llong16;

typedef struct __Reserved_Name__Do_not_use_packed_ullong2 packed_ullong2;
typedef struct __Reserved_Name__Do_not_use_packed_ullong3 packed_ullong3;
typedef struct __Reserved_Name__Do_not_use_packed_ullong4 packed_ullong4;
typedef struct __Reserved_Name__Do_not_use_packed_ullong8 packed_ullong8;
typedef struct __Reserved_Name__Do_not_use_packed_ullong16 packed_ullong16;

typedef __attribute__((__packed_vector_type__(2))) half packed_half2;
typedef __attribute__((__packed_vector_type__(3))) half packed_half3;
typedef __attribute__((__packed_vector_type__(4))) half packed_half4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) half packed_half8;
typedef __attribute__((__packed_vector_type__(16))) half packed_half16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_half8 packed_half8;
typedef struct __Reserved_Name__Do_not_use_packed_half16 packed_half16;
#endif

typedef __attribute__((__packed_vector_type__(2))) float packed_float2;
typedef __attribute__((__packed_vector_type__(3))) float packed_float3;
typedef __attribute__((__packed_vector_type__(4))) float packed_float4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) float packed_float8;
typedef __attribute__((__packed_vector_type__(16))) float packed_float16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_float8 packed_float8;
typedef struct __Reserved_Name__Do_not_use_packed_float16 packed_float16;
#endif

#if defined(__HAVE_NATIVE_DOUBLE__)
typedef __attribute__((__packed_vector_type__(2))) double packed_double2;
typedef __attribute__((__packed_vector_type__(3))) double packed_double3;
typedef __attribute__((__packed_vector_type__(4))) double packed_double4;
#if defined(__HAVE_NATIVE_WIDE_VECTORS__)
typedef __attribute__((__packed_vector_type__(8))) double packed_double8;
typedef __attribute__((__packed_vector_type__(16))) double packed_double16;
#else
typedef struct __Reserved_Name__Do_not_use_packed_double8 packed_double8;
typedef struct __Reserved_Name__Do_not_use_packed_double16 packed_double16;
#endif
#else
typedef struct __Reserved_Name__Do_not_use_packed_double2 packed_double2;
typedef struct __Reserved_Name__Do_not_use_packed_double3 packed_double3;
typedef struct __Reserved_Name__Do_not_use_packed_double4 packed_double4;
typedef struct __Reserved_Name__Do_not_use_packed_double8 packed_double8;
typedef struct __Reserved_Name__Do_not_use_packed_double16 packed_double16;
#endif

typedef struct __Reserved_Name__Do_not_use_packed_quad2 packed_quad2;
typedef struct __Reserved_Name__Do_not_use_packed_quad3 packed_quad3;
typedef struct __Reserved_Name__Do_not_use_packed_quad4 packed_quad4;
typedef struct __Reserved_Name__Do_not_use_packed_quad8 packed_quad8;
typedef struct __Reserved_Name__Do_not_use_packed_quad16 packed_quad16;

#if defined(__HAVE_SIMD_TYPES_PREFIX__)
typedef packed_bool2 simd_packed_bool2;
typedef packed_bool3 simd_packed_bool3;
typedef packed_bool4 simd_packed_bool4;
typedef packed_bool8 simd_packed_bool8;
typedef packed_bool16 simd_packed_bool16;

typedef packed_char2 simd_packed_char2;
typedef packed_char3 simd_packed_char3;
typedef packed_char4 simd_packed_char4;
typedef packed_char8 simd_packed_char8;
typedef packed_char16 simd_packed_char16;

typedef packed_uchar2 simd_packed_uchar2;
typedef packed_uchar3 simd_packed_uchar3;
typedef packed_uchar4 simd_packed_uchar4;
typedef packed_uchar8 simd_packed_uchar8;
typedef packed_uchar16 simd_packed_uchar16;

typedef packed_short2 simd_packed_short2;
typedef packed_short3 simd_packed_short3;
typedef packed_short4 simd_packed_short4;
typedef packed_short8 simd_packed_short8;
typedef packed_short16 simd_packed_short16;

typedef packed_ushort2 simd_packed_ushort2;
typedef packed_ushort3 simd_packed_ushort3;
typedef packed_ushort4 simd_packed_ushort4;
typedef packed_ushort8 simd_packed_ushort8;
typedef packed_ushort16 simd_packed_ushort16;

typedef packed_int2 simd_packed_int2;
typedef packed_int3 simd_packed_int3;
typedef packed_int4 simd_packed_int4;
typedef packed_int8 simd_packed_int8;
typedef packed_int16 simd_packed_int16;

typedef packed_uint2 simd_packed_uint2;
typedef packed_uint3 simd_packed_uint3;
typedef packed_uint4 simd_packed_uint4;
typedef packed_uint8 simd_packed_uint8;
typedef packed_uint16 simd_packed_uint16;

typedef packed_long2 simd_packed_long2;
typedef packed_long3 simd_packed_long3;
typedef packed_long4 simd_packed_long4;
typedef packed_long8 simd_packed_long8;
typedef packed_long16 simd_packed_long16;

typedef packed_ulong2 simd_packed_ulong2;
typedef packed_ulong3 simd_packed_ulong3;
typedef packed_ulong4 simd_packed_ulong4;
typedef packed_ulong8 simd_packed_ulong8;
typedef packed_ulong16 simd_packed_ulong16;

typedef packed_half2 simd_packed_half2;
typedef packed_half3 simd_packed_half3;
typedef packed_half4 simd_packed_half4;
typedef packed_half8 simd_packed_half8;
typedef packed_half16 simd_packed_half16;

typedef packed_float2 simd_packed_float2;
typedef packed_float3 simd_packed_float3;
typedef packed_float4 simd_packed_float4;
typedef packed_float8 simd_packed_float8;
typedef packed_float16 simd_packed_float16;

typedef packed_double2 simd_packed_double2;
typedef packed_double3 simd_packed_double3;
typedef packed_double4 simd_packed_double4;
typedef packed_double8 simd_packed_double8;
typedef packed_double16 simd_packed_double16;

typedef packed_quad2 simd_packed_quad2;
typedef packed_quad3 simd_packed_quad3;
typedef packed_quad4 simd_packed_quad4;
typedef packed_quad8 simd_packed_quad8;
typedef packed_quad16 simd_packed_quad16;
#endif

namespace metal
{
typedef ::packed_bool2 packed_bool2;
typedef ::packed_bool3 packed_bool3;
typedef ::packed_bool4 packed_bool4;
typedef ::packed_bool8 packed_bool8;
typedef ::packed_bool16 packed_bool16;

typedef ::packed_char2 packed_char2;
typedef ::packed_char3 packed_char3;
typedef ::packed_char4 packed_char4;
typedef ::packed_char8 packed_char8;
typedef ::packed_char16 packed_char16;

typedef ::packed_uchar2 packed_uchar2;
typedef ::packed_uchar3 packed_uchar3;
typedef ::packed_uchar4 packed_uchar4;
typedef ::packed_uchar8 packed_uchar8;
typedef ::packed_uchar16 packed_uchar16;

typedef ::packed_short2 packed_short2;
typedef ::packed_short3 packed_short3;
typedef ::packed_short4 packed_short4;
typedef ::packed_short8 packed_short8;
typedef ::packed_short16 packed_short16;

typedef ::packed_ushort2 packed_ushort2;
typedef ::packed_ushort3 packed_ushort3;
typedef ::packed_ushort4 packed_ushort4;
typedef ::packed_ushort8 packed_ushort8;
typedef ::packed_ushort16 packed_ushort16;

typedef ::packed_int2 packed_int2;
typedef ::packed_int3 packed_int3;
typedef ::packed_int4 packed_int4;
typedef ::packed_int8 packed_int8;
typedef ::packed_int16 packed_int16;

typedef ::packed_uint2 packed_uint2;
typedef ::packed_uint3 packed_uint3;
typedef ::packed_uint4 packed_uint4;
typedef ::packed_uint8 packed_uint8;
typedef ::packed_uint16 packed_uint16;

typedef ::packed_long2 packed_long2;
typedef ::packed_long3 packed_long3;
typedef ::packed_long4 packed_long4;
typedef ::packed_long8 packed_long8;
typedef ::packed_long16 packed_long16;

typedef ::packed_ulong2 packed_ulong2;
typedef ::packed_ulong3 packed_ulong3;
typedef ::packed_ulong4 packed_ulong4;
typedef ::packed_ulong8 packed_ulong8;
typedef ::packed_ulong16 packed_ulong16;

typedef ::packed_llong2 packed_llong2;
typedef ::packed_llong3 packed_llong3;
typedef ::packed_llong4 packed_llong4;
typedef ::packed_llong8 packed_llong8;
typedef ::packed_llong16 packed_llong16;

typedef ::packed_ullong2 packed_ullong2;
typedef ::packed_ullong3 packed_ullong3;
typedef ::packed_ullong4 packed_ullong4;
typedef ::packed_ullong8 packed_ullong8;
typedef ::packed_ullong16 packed_ullong16;

typedef ::packed_half2 packed_half2;
typedef ::packed_half3 packed_half3;
typedef ::packed_half4 packed_half4;
typedef ::packed_half8 packed_half8;
typedef ::packed_half16 packed_half16;

typedef ::packed_float2 packed_float2;
typedef ::packed_float3 packed_float3;
typedef ::packed_float4 packed_float4;
typedef ::packed_float8 packed_float8;
typedef ::packed_float16 packed_float16;

typedef ::packed_double2 packed_double2;
typedef ::packed_double3 packed_double3;
typedef ::packed_double4 packed_double4;
typedef ::packed_double8 packed_double8;
typedef ::packed_double16 packed_double16;

typedef ::packed_quad2 packed_quad2;
typedef ::packed_quad3 packed_quad3;
typedef ::packed_quad4 packed_quad4;
typedef ::packed_quad8 packed_quad8;
typedef ::packed_quad16 packed_quad16;

template <typename T, int N>
using packed_vec = T __attribute__((__packed_vector_type__(N)));
}

#endif // __METAL_PACKED_VECTOR
